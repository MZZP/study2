简介：
1， ES6是JS语言下一代标准，目的是是的JS语言可以用来编写复杂的大型应用程序，成为企业级开发语言。2015年6月发布。
2，Babel 是一个广泛使用的ES6转码器，可以将ES6转换成ES5代码。

let 命令(用法)
1. let  用来声明变量，用法类似var， 但是所声明的变量，只在let命令所在的代码块有效。
{
let a = 10 
var b = 1;
}
结果：  a is not  defined，    b // 1   说明，let只在它所在的代码块中有效。
2, let命令很适合用在for循环中，在for循环中，i 只在for循环体中有效，
例子： var a = [];
for (var i = 0; i < 10 ; i++) {
a[i] = function () {
console.log(i);
}
}
a[6]();  //10   i 是var声明的，所以在全局范围内有效，故每一次循环都会覆盖掉原来的值。
但是使用let的话，输出结果是6。 i 只是在本轮循环中有效，每一次循环i都是一个新的变量，所以最后输出的是6。
3, let 不存在变量提升
console.log(foo); //  输出undefined,
console.log(bar); //   报错ReferenceError
var foo = 2;
let bar = 2;
变量foo用var命令声明时，会发生变量提升，即脚本运行时，变量foo已经存在了，但是没有值。变量bar用let声明，因为不存在变量提升，这时如果用到它就会报错。
4, 只要使用let命令，那么它所声明的变量就会绑定在这个区域，不在受外部的影响
var tem = 123;
if (true) {
tem = 'abc'; // RefenceError
let tem;
}
该种情况在语法上叫做 “暂时性死区”，简称TDZ。
if (true) {
tem = 'abc' ; //报错
console.log(tem); //报错
let tem ;  //TDZ
console.log(tem);//undefined
tem = 123;
console.log(tem); // 123
}
TDZ时，typeof 不是一个百分百安全的操作。
typeof x ; //报错
let x; 
此时，变量x用let 来声明，所以在声明之前全是死区，只要用到该变量就会报错。因此，typeof 运行时就会报错。除此之外，如果一个变量并没有声明，此时用tyoeof就会返回undefined。
还有一些死区比较隐蔽，不太容易发现
function bar (x = y, y = 2) {
return [x,y];
}
bar(); //报错.
这种情况下，把里面换成x = 2，y = x 就可以了。
5, let 不允许在相同作用域中，重复声明同一个变量。
//报错
function () {
let a = 10;
var a = 10;
}

//报错
function () {
let a = 10;
let a = 1;
}
也不允许在函数内部重新声明参数。
function  func (arg) {
let arg; //报错
}